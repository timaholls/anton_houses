// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appState = {
    selected: {
        domrf: null,
        avito: null,
        domclick: null
    },
    data: {
        domrf: [],
        avito: [],
        domclick: []
    }
};

// –£—Ç–∏–ª–∏—Ç—ã
function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
async function loadData() {
    const searchQuery = document.getElementById('searchInput').value;
    
    try {
        const response = await fetch(`/api/manual-matching/unmatched/?search=${encodeURIComponent(searchQuery)}`);
        const result = await response.json();
        
        if (result.success) {
            appState.data = result.data;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById('statDomrf').textContent = result.totals.total_domrf;
            document.getElementById('statAvito').textContent = result.totals.total_avito;
            document.getElementById('statDomclick').textContent = result.totals.total_domclick;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            document.getElementById('badgeDomrf').textContent = result.totals.domrf;
            document.getElementById('badgeAvito').textContent = result.totals.avito;
            document.getElementById('badgeDomclick').textContent = result.totals.domclick;
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–∫–∏
            renderList('domrf', result.data.domrf);
            renderList('avito', result.data.avito);
            renderList('domclick', result.data.domclick);
        } else {
            showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + result.error, 'error');
        }
    } catch (error) {
        console.error('Error loading data:', error);
        showToast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
function renderList(source, items) {
    const container = document.getElementById(`${source}List`);
    
    if (!items || items.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                </svg>
                <h3>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
                <p>–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = items.map(item => `
        <div class="record-card" data-id="${item._id}" data-source="${source}" onclick="selectRecord('${source}', '${item._id}')">
            <div class="record-name">${escapeHtml(item.name)}</div>
            <div class="record-details">
                ${item.address ? `<span>üìç ${escapeHtml(item.address)}</span>` : ''}
                ${item.url ? `<a href="${escapeHtml(item.url)}" target="_blank" class="record-url" onclick="event.stopPropagation()">üîó –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫</a>` : ''}
            </div>
        </div>
    `).join('');
}

// –í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏
function selectRecord(source, id) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const previousSelected = document.querySelector(`#${source}List .record-card.selected`);
    if (previousSelected) {
        previousSelected.classList.remove('selected');
    }
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (appState.selected[source] === id) {
        appState.selected[source] = null;
        updateSelectedDisplay();
        return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    appState.selected[source] = id;
    const card = document.querySelector(`#${source}List .record-card[data-id="${id}"]`);
    if (card) {
        card.classList.add('selected');
    }
    
    updateSelectedDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
function updateSelectedDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
    ['domrf', 'avito', 'domclick'].forEach(source => {
        const selectedId = appState.selected[source];
        const displayElement = document.getElementById(`selected${source.charAt(0).toUpperCase() + source.slice(1)}`);
        
        if (selectedId) {
            const item = appState.data[source].find(i => i._id === selectedId);
            if (item) {
                displayElement.textContent = item.name;
                displayElement.style.color = 'var(--success-color)';
            }
        } else {
            displayElement.textContent = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            displayElement.style.color = 'var(--text-secondary)';
        }
    });
    
    // –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveBtn = document.getElementById('saveBtn');
    const canSave = appState.selected.domrf && (appState.selected.avito || appState.selected.domclick);
    saveBtn.disabled = !canSave;
}

// –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
function clearSelection() {
    appState.selected = {
        domrf: null,
        avito: null,
        domclick: null
    };
    
    document.querySelectorAll('.record-card.selected').forEach(card => {
        card.classList.remove('selected');
    });
    
    updateSelectedDisplay();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
async function saveMatch() {
    if (!appState.selected.domrf) {
        showToast('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ DomRF', 'error');
        return;
    }
    
    if (!appState.selected.avito && !appState.selected.domclick) {
        showToast('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∏–∑ Avito –∏–ª–∏ DomClick', 'error');
        return;
    }
    
    const saveBtn = document.getElementById('saveBtn');
    saveBtn.disabled = true;
    saveBtn.innerHTML = '<div class="spinner"></div> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    
    try {
        const response = await fetch('/api/manual-matching/save/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                domrf_id: appState.selected.domrf,
                avito_id: appState.selected.avito,
                domclick_id: appState.selected.domclick,
                created_at: new Date().toISOString()
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('‚úì –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', 'success');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await loadData();
            await loadUnifiedRecords();
            
            // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
            clearSelection();
        } else {
            showToast('–û—à–∏–±–∫–∞: ' + result.error, 'error');
        }
    } catch (error) {
        console.error('Error saving match:', error);
        showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
    } finally {
        saveBtn.disabled = false;
        saveBtn.innerHTML = '‚úì –û–±—ä–µ–¥–∏–Ω–∏—Ç—å';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
async function loadUnifiedRecords() {
    try {
        const response = await fetch('/api/manual-matching/unified/');
        const result = await response.json();
        
        if (result.success) {
            document.getElementById('statUnified').textContent = result.pagination.total;
            renderUnifiedTable(result.data);
        } else {
            showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ' + result.error, 'error');
        }
    } catch (error) {
        console.error('Error loading unified records:', error);
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π', 'error');
    }
}

// –†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
function renderUnifiedTable(records) {
    const tbody = document.getElementById('unifiedTableBody');
    
    if (!records || records.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="4" style="text-align: center; padding: 40px; color: var(--text-secondary);">
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π</p>
                    <p style="font-size: 12px; margin-top: 10px;">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å"</p>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = records.map(record => `
        <tr>
            <td>${escapeHtml(record.domrf_name)}</td>
            <td>${escapeHtml(record.avito_name)}</td>
            <td>${escapeHtml(record.domclick_name)}</td>
            <td>
                <span class="source-badge ${record.source}">${record.source === 'manual' ? 'üë§ –†—É—á–Ω–æ–µ' : 'ü§ñ –ê–≤—Ç–æ'}</span>
            </td>
        </tr>
    `).join('');
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return String(text).replace(/[&<>"']/g, m => map[m]);
}

// –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
let searchTimeout;
document.getElementById('searchInput')?.addEventListener('input', function() {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
        loadData();
    }, 500);
});

