"""
API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∞–∫—Ü–∏–π
"""

from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
from bson import ObjectId
from datetime import datetime
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os

from ..services.mongo_service import get_mongo_connection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
SENDER_EMAIL = os.getenv('SENDER_EMAIL', 'noreply@century21-ufa.ru')
SMTP_SERVER = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
APP_PASSWORD = os.getenv('APP_PASSWORD', '')


@csrf_exempt
@require_http_methods(["POST"])
def subscribe_to_updates(request):
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∞–∫—Ü–∏–π"""
    try:
        payload = json.loads(request.body.decode('utf-8'))
        email = (payload.get('email') or '').strip().lower()
        name = (payload.get('name') or '').strip()
        subscribe_to_projects = payload.get('subscribe_to_projects', True)
        subscribe_to_promotions = payload.get('subscribe_to_promotions', True)
        
        if not email:
            return JsonResponse({
                'success': False, 
                'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }, status=400)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if '@' not in email or '.' not in email.split('@')[1]:
            return JsonResponse({
                'success': False, 
                'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
            }, status=400)
        
        db = get_mongo_connection()
        subscriptions = db['subscriptions']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ —Å —Ç–∞–∫–∏–º email
        existing = subscriptions.find_one({'email': email})
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscriptions.update_one(
                {'email': email},
                {
                    '$set': {
                        'name': name,
                        'subscribe_to_projects': subscribe_to_projects,
                        'subscribe_to_promotions': subscribe_to_promotions,
                        'updated_at': datetime.utcnow(),
                        'is_active': True
                    }
                }
            )
            message = '–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = {
                'email': email,
                'name': name,
                'subscribe_to_projects': subscribe_to_projects,
                'subscribe_to_promotions': subscribe_to_promotions,
                'is_active': True,
                'created_at': datetime.utcnow(),
                'updated_at': datetime.utcnow()
            }
            subscriptions.insert_one(subscription)
            message = '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞'
        
        return JsonResponse({
            'success': True,
            'message': message
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_http_methods(["POST"])
def unsubscribe_from_updates(request):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    try:
        payload = json.loads(request.body.decode('utf-8'))
        email = (payload.get('email') or '').strip().lower()
        
        if not email:
            return JsonResponse({
                'success': False, 
                'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }, status=400)
        
        db = get_mongo_connection()
        subscriptions = db['subscriptions']
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        result = subscriptions.update_one(
            {'email': email},
            {
                '$set': {
                    'is_active': False,
                    'unsubscribed_at': datetime.utcnow()
                }
            }
        )
        
        if result.modified_count > 0:
            return JsonResponse({
                'success': True,
                'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
            })
        else:
            return JsonResponse({
                'success': False,
                'error': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=404)
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


def send_notification_email(subscribers, subject, message, project_name=None, promotion_title=None, project_data=None, promotion_data=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    if not APP_PASSWORD:
        print("APP_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email")
        return
    
    try:
        for subscriber in subscribers:
            email = subscriber['email']
            name = subscriber.get('name', '')
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!" if name else "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
            
            if project_name and project_data:
                email_subject = f"üèóÔ∏è –ù–æ–≤—ã–π –±—É–¥—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {project_name}"
                email_body = create_project_email_template(greeting, project_name, project_data)
            elif promotion_title and promotion_data:
                email_subject = f"üéüÔ∏è –ù–æ–≤–∞—è –∞–∫—Ü–∏—è: {promotion_title}"
                email_body = create_promotion_email_template(greeting, promotion_title, promotion_data)
            else:
                email_subject = subject
                email_body = f"""
{greeting}

{message}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ CENTURY 21
                """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            print(f"Attempting to send email to {email}...")
            msg = MIMEMultipart()
            msg['From'] = SENDER_EMAIL
            msg['To'] = email
            msg['Subject'] = email_subject
            
            msg.attach(MIMEText(email_body, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
            server.starttls()
            server.login(SENDER_EMAIL, APP_PASSWORD)
            server.sendmail(SENDER_EMAIL, email, msg.as_string())
            server.quit()
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")


def create_project_email_template(greeting, project_name, project_data):
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    city = project_data.get('city', '–£—Ñ–∞')
    district = project_data.get('district', '')
    developer = project_data.get('developer', '')
    delivery_date = project_data.get('delivery_date', '')
    house_class = project_data.get('house_class', '')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    if delivery_date and isinstance(delivery_date, datetime):
        delivery_str = delivery_date.strftime('%d.%m.%Y')
    elif delivery_date:
        delivery_str = str(delivery_date)
    else:
        delivery_str = '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è'
    
    location = f"{city}" + (f", {district}" if district else "")
    
    return f"""
{greeting}

üèóÔ∏è –ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–æ–≤–æ–º –±—É–¥—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ!

üìã –ù–ê–ó–í–ê–ù–ò–ï: {project_name}
üìç –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï: {location}
üè¢ –ó–ê–°–¢–†–û–ô–©–ò–ö: {developer if developer else '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è'}
üìÖ –°–†–û–ö –°–î–ê–ß–ò: {delivery_str}
üè† –ö–õ–ê–°–° –î–û–ú–ê: {house_class if house_class else '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è'}

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å—Ç–∞–Ω–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ –≤ —Ä–∞–∑–≤–∏–≤–∞—é—â–µ–º—Å—è —Ä–∞–π–æ–Ω–µ –≥–æ—Ä–æ–¥–∞.

üîç –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ CENTURY 21
üìß Email: {SENDER_EMAIL}
üåê –°–∞–π—Ç: century21-ufa.ru

---
–ï—Å–ª–∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö, 
–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: /unsubscribe/
"""


def create_promotion_email_template(greeting, promotion_title, promotion_data):
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –¥–ª—è –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏"""
    description = promotion_data.get('description', '')
    starts_at = promotion_data.get('starts_at', '')
    ends_at = promotion_data.get('ends_at', '')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    if starts_at and isinstance(starts_at, datetime):
        start_str = starts_at.strftime('%d.%m.%Y')
    elif starts_at:
        start_str = str(starts_at)
    else:
        start_str = '–£–∂–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç'
    
    if ends_at and isinstance(ends_at, datetime):
        end_str = ends_at.strftime('%d.%m.%Y')
    elif ends_at:
        end_str = str(ends_at)
    else:
        end_str = '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è'
    
    return f"""
{greeting}

üéüÔ∏è –£ –Ω–∞—Å –Ω–æ–≤–∞—è –∞–∫—Ü–∏—è!

üìã –ù–ê–ó–í–ê–ù–ò–ï: {promotion_title}
üìù –û–ü–ò–°–ê–ù–ò–ï: {description if description else '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'}
üìÖ –ü–ï–†–ò–û–î –î–ï–ô–°–¢–í–ò–Ø: {start_str} - {end_str}

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã–≥–æ–¥–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!

üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏ –∏ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è —É—Ç–æ—á–Ω—è–π—Ç–µ —É –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ CENTURY 21
üìß Email: {SENDER_EMAIL}
üåê –°–∞–π—Ç: century21-ufa.ru

---
–ï—Å–ª–∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ü–∏—è—Ö, 
–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: /unsubscribe/
"""


def notify_new_future_project(project_data):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –±—É–¥—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ"""
    try:
        db = get_mongo_connection()
        subscriptions = db['subscriptions']
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã
        subscribers = list(subscriptions.find({
            'is_active': True,
            'subscribe_to_projects': True
        }))
        
        if subscribers:
            project_name = project_data.get('name', '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
            
            send_notification_email(
                subscribers, 
                "–ù–æ–≤—ã–π –±—É–¥—É—â–∏–π –ø—Ä–æ–µ–∫—Ç", 
                "", 
                project_name=project_name,
                project_data=project_data
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ: {e}")


def notify_new_promotion(promotion_data):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏"""
    try:
        db = get_mongo_connection()
        subscriptions = db['subscriptions']
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∞–∫—Ü–∏–∏
        subscribers = list(subscriptions.find({
            'is_active': True,
            'subscribe_to_promotions': True
        }))
        
        if subscribers:
            promotion_title = promotion_data.get('title', '–ù–æ–≤–∞—è –∞–∫—Ü–∏—è')
            
            send_notification_email(
                subscribers, 
                "–ù–æ–≤–∞—è –∞–∫—Ü–∏—è", 
                "", 
                promotion_title=promotion_title,
                promotion_data=promotion_data
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏: {e}")


@require_http_methods(["GET"])
def get_subscription_stats(request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        db = get_mongo_connection()
        subscriptions = db['subscriptions']
        
        total_subscriptions = subscriptions.count_documents({})
        active_subscriptions = subscriptions.count_documents({'is_active': True})
        project_subscribers = subscriptions.count_documents({
            'is_active': True,
            'subscribe_to_projects': True
        })
        promotion_subscribers = subscriptions.count_documents({
            'is_active': True,
            'subscribe_to_promotions': True
        })
        
        return JsonResponse({
            'success': True,
            'stats': {
                'total_subscriptions': total_subscriptions,
                'active_subscriptions': active_subscriptions,
                'project_subscribers': project_subscribers,
                'promotion_subscribers': promotion_subscribers
            }
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)
