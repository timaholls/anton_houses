#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π unified_houses
–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
"""

import os
import sys
import django
from datetime import datetime, timezone
from bson import ObjectId

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/home/art/PycharmProjects/anton_houses')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'anton_houses.settings')
django.setup()

from main.views import get_mongo_connection


def normalize_datetime(dt):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç datetime –∫ UTC –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if dt is None:
        return None
    
    # –ï—Å–ª–∏ datetime –±–µ–∑ timezone, –¥–æ–±–∞–≤–ª—è–µ–º UTC
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    
    # –ï—Å–ª–∏ datetime —Å timezone, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
    return dt.astimezone(timezone.utc)


def get_source_timestamp(record):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    max_timestamp = None
    updated_records = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DomRF
    if record.get('_source_ids', {}).get('domrf'):
        try:
            domrf_id = ObjectId(record['_source_ids']['domrf'])
            db = get_mongo_connection()
            domrf_record = db['domrf'].find_one({'_id': domrf_id})
            if domrf_record:
                if domrf_record.get('updated_at'):
                    normalized_dt = normalize_datetime(domrf_record['updated_at'])
                    if not max_timestamp or normalized_dt > max_timestamp:
                        max_timestamp = normalized_dt
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º updated_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    print(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º updated_at –¥–ª—è DomRF {domrf_id}")
                    current_time = datetime.now(timezone.utc)
                    db['domrf'].update_one(
                        {'_id': domrf_id},
                        {'$set': {'updated_at': current_time}}
                    )
                    updated_records.append(f"DomRF {domrf_id}")
                    if not max_timestamp or current_time > max_timestamp:
                        max_timestamp = current_time
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DomRF {domrf_id}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Avito
    if record.get('_source_ids', {}).get('avito'):
        try:
            avito_id = ObjectId(record['_source_ids']['avito'])
            db = get_mongo_connection()
            avito_record = db['avito'].find_one({'_id': avito_id})
            if avito_record:
                if avito_record.get('updated_at'):
                    normalized_dt = normalize_datetime(avito_record['updated_at'])
                    if not max_timestamp or normalized_dt > max_timestamp:
                        max_timestamp = normalized_dt
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º updated_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    print(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º updated_at –¥–ª—è Avito {avito_id}")
                    current_time = datetime.now(timezone.utc)
                    db['avito'].update_one(
                        {'_id': avito_id},
                        {'$set': {'updated_at': current_time}}
                    )
                    updated_records.append(f"Avito {avito_id}")
                    if not max_timestamp or current_time > max_timestamp:
                        max_timestamp = current_time
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Avito {avito_id}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DomClick
    if record.get('_source_ids', {}).get('domclick'):
        try:
            domclick_id = ObjectId(record['_source_ids']['domclick'])
            db = get_mongo_connection()
            domclick_record = db['domclick'].find_one({'_id': domclick_id})
            if domclick_record:
                if domclick_record.get('updated_at'):
                    normalized_dt = normalize_datetime(domclick_record['updated_at'])
                    if not max_timestamp or normalized_dt > max_timestamp:
                        max_timestamp = normalized_dt
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º updated_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    print(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º updated_at –¥–ª—è DomClick {domclick_id}")
                    current_time = datetime.now(timezone.utc)
                    db['domclick'].update_one(
                        {'_id': domclick_id},
                        {'$set': {'updated_at': current_time}}
                    )
                    updated_records.append(f"DomClick {domclick_id}")
                    if not max_timestamp or current_time > max_timestamp:
                        max_timestamp = current_time
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DomClick {domclick_id}: {e}")
    
    if updated_records:
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {', '.join(updated_records)}")
    
    return max_timestamp


def rebuild_unified_record(unified_record):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¢–û–ß–ù–û –ü–û –õ–û–ì–ò–ö–ï save_manual_match"""
    db = get_mongo_connection()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    source_ids = unified_record.get('_source_ids', {})
    print(f"üîç Source IDs: {source_ids}")
    
    domrf_record = None
    if source_ids.get('domrf'):
        try:
            domrf_record = db['domrf'].find_one({'_id': ObjectId(source_ids['domrf'])})
            print(f"üìÑ DomRF record found: {bool(domrf_record)}")
        except Exception as e:
            print(f"‚ùå Error getting DomRF: {e}")
    
    avito_record = None
    if source_ids.get('avito'):
        try:
            avito_record = db['avito'].find_one({'_id': ObjectId(source_ids['avito'])})
            print(f"üìÑ Avito record found: {bool(avito_record)}")
        except Exception as e:
            print(f"‚ùå Error getting Avito: {e}")
    
    domclick_record = None
    if source_ids.get('domclick'):
        try:
            domclick_record = db['domclick'].find_one({'_id': ObjectId(source_ids['domclick'])})
            print(f"üìÑ DomClick record found: {bool(domclick_record)}")
        except Exception as e:
            print(f"‚ùå Error getting DomClick: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
    if not avito_record and not domclick_record:
        print(f"‚ùå –ù–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è unified_record {unified_record['_id']}")
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: DomRF > Avito > DomClick > —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ unified_record)
    latitude = None
    longitude = None
    
    if domrf_record:
        latitude = domrf_record.get('latitude')
        longitude = domrf_record.get('longitude')
    elif avito_record:
        latitude = avito_record.get('latitude')
        longitude = avito_record.get('longitude')
    elif domclick_record:
        latitude = domclick_record.get('latitude')
        longitude = domclick_record.get('longitude')
    
    # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö, –±–µ—Ä–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π unified_record
    if not latitude or not longitude:
        latitude = unified_record.get('latitude')
        longitude = unified_record.get('longitude')
        if latitude and longitude:
            print(f"üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ unified_record: ({latitude}, {longitude})")
    
    if not latitude or not longitude:
        print(f"‚ö†Ô∏è –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∏ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö, –Ω–∏ –≤ unified_record {unified_record['_id']}")
        return None
    
    # === –ü–ï–†–ï–°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –° –ù–£–õ–Ø –ü–û –¢–û–ß–ù–û–ô –õ–û–ì–ò–ö–ï save_manual_match ===
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    old_dev = unified_record.get('development', {})
    old_apt_types = unified_record.get('apartment_types', {})
    old_apt_counts = {}
    total_old_apartments = 0
    for apt_type, apt_data in old_apt_types.items():
        count = len(apt_data.get('apartments', []))
        old_apt_counts[apt_type] = count
        total_old_apartments += count
    
    changes = []
    
    # 1. –°–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ –∑–∞–ø–∏—Å—å (–∫–∞–∫ –≤ save_manual_match)
    new_record = {
        'latitude': latitude,
        'longitude': longitude,
        'source': 'manual',
        'created_by': 'manual',
        'is_featured': unified_record.get('is_featured', False),
        'agent_id': unified_record.get('agent_id'),
        'updated_at': datetime.now(timezone.utc)
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if unified_record.get('latitude') != latitude or unified_record.get('longitude') != longitude:
        changes.append(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({unified_record.get('latitude')}, {unified_record.get('longitude')}) ‚Üí ({latitude}, {longitude})")
    
    # 2. Development –∏–∑ Avito + photos –∏–∑ DomClick (–¢–û–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê)
    if avito_record:
        avito_dev = avito_record.get('development', {})
        if isinstance(avito_dev, dict):
            new_name = avito_dev.get('name', '')
            new_address = avito_dev.get('address', '')
            new_price = avito_dev.get('price_range', '')
            new_korpuses = avito_dev.get('korpuses', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if old_dev.get('name') != new_name:
                changes.append(f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: '{old_dev.get('name', '')}' ‚Üí '{new_name}'")
            if old_dev.get('address') != new_address:
                changes.append(f"üì´ –ê–¥—Ä–µ—Å: '{old_dev.get('address', '')}' ‚Üí '{new_address}'")
            if old_dev.get('price_range') != new_price:
                changes.append(f"üí∞ –¶–µ–Ω—ã: '{old_dev.get('price_range', '')}' ‚Üí '{new_price}'")
            if len(old_dev.get('korpuses', [])) != len(new_korpuses):
                changes.append(f"üèóÔ∏è –ö–æ—Ä–ø—É—Å–æ–≤: {len(old_dev.get('korpuses', []))} ‚Üí {len(new_korpuses)}")
            
            new_record['development'] = {
                'name': new_name,
                'address': new_address,
                'price_range': new_price,
                'parameters': avito_dev.get('parameters', {}),
                'korpuses': new_korpuses,
                'photos': []  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ DomClick
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ñ–ö –∏ —Ö–æ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ DomClick
            if domclick_record:
                domclick_dev = domclick_record.get('development', {})
                dev_photos = domclick_dev.get('photos', [])
                new_record['development']['photos'] = dev_photos
                
                old_photos_count = len(old_dev.get('photos', []))
                new_photos_count = len(dev_photos)
                if old_photos_count != new_photos_count:
                    changes.append(f"üì∏ –§–æ—Ç–æ –ñ–ö: {old_photos_count} ‚Üí {new_photos_count}")

                # –•–æ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: –±–µ—Ä—ë–º –∏–∑ development.construction_progress –∏–ª–∏ –∫–æ—Ä–Ω—è
                dc_construction = domclick_dev.get('construction_progress') or domclick_record.get('construction_progress')
                if dc_construction:
                    new_record['construction_progress'] = dc_construction
    
    # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º apartment_types (–¢–û–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê –∏–∑ save_manual_match)
    new_record['apartment_types'] = {}
    
    if avito_record and domclick_record:
        avito_apt_types = avito_record.get('apartment_types', {})
        domclick_apt_types = domclick_record.get('apartment_types', {})
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –Ω–æ–≤—ã–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ (–¢–û–ß–ù–û –ö–ê–ö –í save_manual_match)
        name_mapping = {
            # –°—Ç—É–¥–∏—è
            '–°—Ç—É–¥–∏—è': '–°—Ç—É–¥–∏—è',
            # 1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ Avito –∏ DomClick)
            '1 –∫–æ–º.': '1',
            '1-–∫–æ–º–Ω': '1',
            '1-–∫–æ–º–Ω.': '1',
            # 2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
            '2 –∫–æ–º.': '2',  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è Avito
            '2': '2',
            '2-–∫–æ–º–Ω': '2',
            '2-–∫–æ–º–Ω.': '2',
            # 3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ
            '3': '3',
            '3-–∫–æ–º–Ω': '3',
            '3-–∫–æ–º–Ω.': '3',
            # 4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ
            '4': '4',
            '4-–∫–æ–º–Ω': '4',
            '4-–∫–æ–º–Ω.': '4',
            '4-–∫–æ–º–Ω.+': '4',
            '4-–∫–æ–º–Ω+': '4'
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∏–∑ DomClick (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å 1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ)
        processed_types = set()
        new_apt_counts = {}
        
        for dc_type_name, dc_type_data in domclick_apt_types.items():
            # –£–ø—Ä–æ—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
            simplified_name = name_mapping.get(dc_type_name, dc_type_name)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∏–ø
            if simplified_name in processed_types:
                continue
            processed_types.add(simplified_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ DomClick
            dc_apartments = dc_type_data.get('apartments', [])
            if not dc_apartments:
                continue
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –≤ Avito
            avito_apartments = []
            for avito_type_name, avito_data in avito_apt_types.items():
                avito_simplified = name_mapping.get(avito_type_name, avito_type_name)
                if avito_simplified == simplified_name:
                    avito_apartments = avito_data.get('apartments', [])
                    break
            
            # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Avito
            if not avito_apartments:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏–ø, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Avito
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –≤ DomClick
            combined_apartments = []
            
            for i, dc_apt in enumerate(dc_apartments):
                # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ñ–æ—Ç–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ DomClick –∫–∞–∫ –ú–ê–°–°–ò–í
                apartment_photos = dc_apt.get('photos', [])
                
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—É
                if not apartment_photos:
                    continue
                
                # –ë–µ—Ä–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–∑ Avito (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
                avito_apt = avito_apartments[i % len(avito_apartments)]
                
                combined_apartments.append({
                    'title': avito_apt.get('title', ''),
                    'price': avito_apt.get('price', ''),
                    'pricePerSquare': avito_apt.get('pricePerSquare', ''),
                    'completionDate': avito_apt.get('completionDate', ''),
                    'url': avito_apt.get('urlPath', ''),
                    'image': apartment_photos  # –ú–ê–°–°–ò–í –≤—Å–µ—Ö —Ñ–æ—Ç–æ —ç—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏!
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å —Ñ–æ—Ç–æ –ò –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Avito
            if combined_apartments:
                new_record['apartment_types'][simplified_name] = {
                    'apartments': combined_apartments
                }
                new_apt_counts[simplified_name] = len(combined_apartments)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–≤–∞—Ä—Ç–∏—Ä
        total_new_apartments = sum(new_apt_counts.values())
        if total_old_apartments != total_new_apartments:
            changes.append(f"üè† –í—Å–µ–≥–æ –∫–≤–∞—Ä—Ç–∏—Ä: {total_old_apartments} ‚Üí {total_new_apartments}")
        
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        all_types = set(old_apt_counts.keys()) | set(new_apt_counts.keys())
        for apt_type in sorted(all_types):
            old_count = old_apt_counts.get(apt_type, 0)
            new_count = new_apt_counts.get(apt_type, 0)
            if old_count != new_count:
                if old_count == 0:
                    changes.append(f"  ‚ûï {apt_type}-–∫–æ–º–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {new_count} –∫–≤–∞—Ä—Ç–∏—Ä")
                elif new_count == 0:
                    changes.append(f"  ‚ûñ {apt_type}-–∫–æ–º–Ω: —É–¥–∞–ª–µ–Ω–æ {old_count} –∫–≤–∞—Ä—Ç–∏—Ä")
                else:
                    changes.append(f"  üìä {apt_type}-–∫–æ–º–Ω: {old_count} ‚Üí {new_count} –∫–≤–∞—Ä—Ç–∏—Ä")
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    new_record['_source_ids'] = source_ids
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes:
        print(f"\nüìù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ó–ê–ü–ò–°–ò:")
        for change in changes:
            print(f"   {change}")
        print()
    else:
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç\n")
    
    return new_record


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ unified_houses...")
    
    db = get_mongo_connection()
    unified_col = db['unified_houses']
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    unified_records = list(unified_col.find({}))
    total_records = len(unified_records)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_records} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    updated_count = 0
    skipped_count = 0
    error_count = 0
    
    for i, record in enumerate(unified_records, 1):
        try:
            print(f"\n[{i}/{total_records}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {record.get('development', {}).get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            source_timestamp = get_source_timestamp(record)
            
            if not source_timestamp:
                print(f"‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                skipped_count += 1
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            unified_timestamp = record.get('updated_at', record.get('_id').generation_time)
            unified_timestamp = normalize_datetime(unified_timestamp)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
            if source_timestamp <= unified_timestamp:
                print(f"‚úÖ –ó–∞–ø–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω–∞ (–∏—Å—Ö–æ–¥–Ω—ã–µ: {source_timestamp}, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è: {unified_timestamp})")
                skipped_count += 1
                continue
            
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º (–∏—Å—Ö–æ–¥–Ω—ã–µ: {source_timestamp}, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è: {unified_timestamp})")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            new_record = rebuild_unified_record(record)
            
            if new_record:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
                result = unified_col.replace_one(
                    {'_id': record['_id']},
                    new_record
                )
                
                if result.modified_count > 0:
                    print(f"‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    updated_count += 1
                else:
                    print(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
                    skipped_count += 1
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
                error_count += 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            error_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {updated_count + skipped_count + error_count}")


if __name__ == "__main__":
    main()
